select * from Customers;

select * from Sellers;

select * from Category;

select * from Product;

select * from Inventory;

select * from Orders;

select * from Order_Items;

select * from Payment;

-- 1. View all customers
-- Fetches the full list of customers stored in the database
SELECT * FROM Customers;

-- 2. View all products with prices
-- Displays each product's name along with its price
SELECT product_name, price FROM Product;

-- 3. Show all orders with customer name
-- Links each order to the respective customer who placed it
SELECT o.order_id, c.customer_name, o.order_date
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id;

-- 4. List products and their sellers
-- Displays all products with the name of the seller offering them
SELECT p.product_name, s.seller_name
FROM Product p
JOIN Sellers s ON p.seller_id = s.seller_id;

-- 5. Total revenue by seller
-- Calculates total revenue generated by each seller based on sold products
SELECT s.seller_name, SUM(oi.quantity * oi.item_price) AS revenue
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
JOIN Sellers s ON p.seller_id = s.seller_id
GROUP BY s.seller_name
ORDER BY revenue DESC;

-- 6. Most sold product
-- Identifies the product with the highest total units sold
SELECT p.product_name, SUM(oi.quantity) AS total_sold
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 1;

-- 7. Customers who ordered more than 2 times
-- Shows frequent customers with more than 2 orders
SELECT c.customer_name, COUNT(o.order_id) AS order_count
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_name
HAVING order_count > 2;

-- 8. Inventory alert (low stock)
-- Lists all products with stock quantity below 100
SELECT p.product_name, i.stock_quantity
FROM Inventory i
JOIN Product p ON i.product_id = p.product_id
WHERE i.stock_quantity < 100;

-- 9. Monthly sales trend
-- Shows total sales amount grouped by month
SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, SUM(total_amount) AS revenue
FROM Orders
GROUP BY month
ORDER BY month;

-- 10. Most used payment method
-- Ranks payment methods by number of times used
SELECT payment_method, COUNT(*) AS usage_count
FROM Payment
GROUP BY payment_method
ORDER BY usage_count DESC;

-- 11. Top 5 customers by total spend
-- Highest spending customers based on order amounts
SELECT c.customer_name, SUM(o.total_amount) AS total_spent
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_name
ORDER BY total_spent DESC
LIMIT 5;

-- 12. Top 5 products by revenue
-- Most profitable products based on total sales value
SELECT p.product_name, SUM(oi.quantity * oi.item_price) AS revenue
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue DESC
LIMIT 5;

-- 13. Category-wise revenue
-- Summarizes total revenue earned by each product category
SELECT c.category_name, SUM(oi.quantity * oi.item_price) AS total_revenue
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
JOIN Category c ON p.category_id = c.category_id
GROUP BY c.category_name;

-- 14. Orders by country
-- For now, only shows India as customer base
SELECT country, COUNT(order_id) AS order_count
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY country;

-- 15. Average order value by customer
-- Shows average order amount for each customer
SELECT c.customer_name, AVG(o.total_amount) AS avg_order_value
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_name;

-- 16. Product-wise average quantity
-- Average quantity per order for each product
SELECT p.product_name, AVG(oi.quantity) AS avg_quantity
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
GROUP BY p.product_name;

-- 17. Category-wise average price
-- Average product price per category
SELECT c.category_name, AVG(p.price) AS avg_price
FROM Product p
JOIN Category c ON p.category_id = c.category_id
GROUP BY c.category_name;

-- 18. Payment status summary
-- Shows count of completed, pending, etc. payments
SELECT payment_status, COUNT(*) AS status_count
FROM Payment
GROUP BY payment_status;

-- 19. Orders with multiple items
-- Filters orders that contain more than 1 product
SELECT o.order_id, COUNT(oi.order_item_id) AS items
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
GROUP BY o.order_id
HAVING items > 1;

-- 20. Products never sold
-- Identifies products that were never part of any order
SELECT product_name
FROM Product
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);

-- 21. Sellers with most products
-- Counts number of products listed per seller
SELECT s.seller_name, COUNT(p.product_id) AS product_count
FROM Sellers s
JOIN Product p ON s.seller_id = p.seller_id
GROUP BY s.seller_name
ORDER BY product_count DESC;

-- 22. Most common product in orders
-- Product that appeared most frequently across all orders
SELECT p.product_name, COUNT(*) AS freq
FROM Order_Items oi
JOIN Product p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY freq DESC
LIMIT 1;

-- 23. Orders without payments
-- Orders for which payment is not yet recorded
SELECT o.order_id
FROM Orders o
LEFT JOIN Payment p ON o.order_id = p.order_id
WHERE p.order_id IS NULL;

-- 24. Revenue per customer
-- Total money spent by each customer
SELECT c.customer_name, SUM(o.total_amount) AS revenue
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_name
ORDER BY revenue DESC;

-- 25. High value products in each category
-- Products priced higher than the category average
SELECT p.product_name, p.price, c.category_name
FROM Product p
JOIN Category c ON p.category_id = c.category_id
WHERE p.price > (
  SELECT AVG(p2.price)
  FROM Product p2
  WHERE p2.category_id = p.category_id
);

-- 26. Total order items sold
-- Sum of all order items across all orders
SELECT COUNT(*) AS total_order_items FROM Order_Items;

-- 27. Seller performance with rating
-- Combines revenue and average rating per seller
SELECT s.seller_name, s.rating,
  SUM(oi.quantity * oi.item_price) AS revenue
FROM Sellers s
JOIN Product p ON s.seller_id = p.seller_id
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY s.seller_name, s.rating
ORDER BY revenue DESC;

-- 28. Customers who used all payment methods
-- Finds customers who used every available payment method
SELECT c.customer_name
FROM Customers c
WHERE NOT EXISTS (
  SELECT DISTINCT payment_method FROM Payment
  WHERE payment_method NOT IN (
    SELECT DISTINCT p.payment_method
    FROM Orders o
    JOIN Payment p ON o.order_id = p.order_id
    WHERE o.customer_id = c.customer_id
  )
);

-- 29. Revenue by month and category
-- Combines date and category-based revenue analysis
SELECT DATE_FORMAT(o.order_date, '%Y-%m') AS month, c.category_name,
       SUM(oi.quantity * oi.item_price) AS revenue
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
JOIN Product p ON oi.product_id = p.product_id
JOIN Category c ON p.category_id = c.category_id
GROUP BY month, c.category_name
ORDER BY month, revenue DESC;

-- 30. Total revenue
-- Overall gross sales across all orders
SELECT SUM(total_amount) AS total_revenue FROM Orders;
